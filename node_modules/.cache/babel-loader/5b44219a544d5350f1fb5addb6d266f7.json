{"ast":null,"code":"var _jsxFileName = \"/home/nxtwave/reactjs/coding-practices/emojiGame/src/components/EmojiGame/index.js\";\n/* \nQuick Tip \n\n- Use the below function in the EmojiGame Component to shuffle the emojisList every time when an emoji is clicked.\n\nconst shuffledEmojisList = () => {\n  const {emojisList} = this.props\n  return emojisList.sort(() => Math.random() - 0.5)\n}\n\n*/\n\n// Write your code here.\n\nimport { Component } from 'react';\nimport EmojiCard from '../EmojiCard';\nimport NavBar from '../NavBar';\nimport WinOrLoseCard from '../WinOrLoseCard';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass EmojiGame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clickedEmojisList: [],\n      isGameInProgress: true,\n      topScore: 0\n    };\n    this.resetGame = () => {\n      this.setState({\n        clickedEmojisList: [],\n        isGameInProgress: true\n      });\n    };\n    this.renderScoreCard = () => {\n      const {\n        emojisList\n      } = this.props;\n      const {\n        clickedEmojisList\n      } = this.state;\n      const isWon = clickedEmojisList.length === emojisList.length;\n      return /*#__PURE__*/_jsxDEV(WinOrLoseCard, {\n        isWon: isWon,\n        score: clickedEmojisList.length,\n        onClickPlayAgain: this.resetGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this);\n    };\n    this.finishGameAndSetTopScore = currentScore => {\n      const {\n        topScore\n      } = this.state;\n      let newTopScore = topScore;\n      if (currentScore > topScore) {\n        newTopScore = currentScore;\n      }\n      this.setState({\n        topScore: newTopScore,\n        isGameInProgress: false\n      });\n    };\n    this.clickEmoji = id => {\n      const {\n        emojisList\n      } = this.props;\n      const {\n        clickedEmojisList\n      } = this.state;\n      const isEmojiPresent = clickedEmojisList.includes(id);\n      const clickedEmojisLength = clickedEmojisList.length;\n      if (isEmojiPresent) {\n        this.finishGameAndSetTopScore(clickedEmojisLength);\n      } else {\n        if (emojisList.length - 1 === clickedEmojisLength) {\n          this.finishGameAndSetTopScore(emojisList.length);\n        }\n        this.setState(previousState => ({\n          clickedEmojisList: [...previousState.clickedEmojisList, id]\n        }));\n      }\n    };\n    this.getShuffledEmojisList = () => {\n      const {\n        emojisList\n      } = this.props;\n      return emojisList.sort(() => Math.random() - 0.5);\n    };\n    this.renderEmojisList = () => {\n      const shuffledEmojisList = this.getShuffledEmojisList();\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"emojis-list-container\",\n        children: shuffledEmojisList.map(emojiObject => /*#__PURE__*/_jsxDEV(EmojiCard, {\n          emojiDetails: emojiObject,\n          clickEmoji: this.clickEmoji\n        }, emojiObject.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this);\n    };\n  }\n  render() {\n    const {\n      clickedEmojisList,\n      isGameInProgress,\n      topScore\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        currentScore: clickedEmojisList.length,\n        isGameInProgress: isGameInProgress,\n        topScore: topScore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: isGameInProgress ? this.renderEmojisList() : this.renderScoreCard()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default EmojiGame;","map":{"version":3,"names":["Component","EmojiCard","NavBar","WinOrLoseCard","jsxDEV","_jsxDEV","EmojiGame","constructor","args","state","clickedEmojisList","isGameInProgress","topScore","resetGame","setState","renderScoreCard","emojisList","props","isWon","length","score","onClickPlayAgain","fileName","_jsxFileName","lineNumber","columnNumber","finishGameAndSetTopScore","currentScore","newTopScore","clickEmoji","id","isEmojiPresent","includes","clickedEmojisLength","previousState","getShuffledEmojisList","sort","Math","random","renderEmojisList","shuffledEmojisList","className","children","map","emojiObject","emojiDetails","render"],"sources":["/home/nxtwave/reactjs/coding-practices/emojiGame/src/components/EmojiGame/index.js"],"sourcesContent":["/* \nQuick Tip \n\n- Use the below function in the EmojiGame Component to shuffle the emojisList every time when an emoji is clicked.\n\nconst shuffledEmojisList = () => {\n  const {emojisList} = this.props\n  return emojisList.sort(() => Math.random() - 0.5)\n}\n\n*/\n\n// Write your code here.\n\nimport {Component} from 'react'\n\nimport EmojiCard from '../EmojiCard'\nimport NavBar from '../NavBar'\nimport WinOrLoseCard from '../WinOrLoseCard'\n\nimport './index.css'\n\nclass EmojiGame extends Component {\n  state = {\n    clickedEmojisList: [],\n    isGameInProgress: true,\n    topScore: 0,\n  }\n\n  resetGame = () => {\n    this.setState({clickedEmojisList: [], isGameInProgress: true})\n  }\n\n  renderScoreCard = () => {\n    const {emojisList} = this.props\n    const {clickedEmojisList} = this.state\n    const isWon = clickedEmojisList.length === emojisList.length\n\n    return (\n      <WinOrLoseCard\n        isWon={isWon}\n        score={clickedEmojisList.length}\n        onClickPlayAgain={this.resetGame}\n      />\n    )\n  }\n\n  finishGameAndSetTopScore = currentScore => {\n    const {topScore} = this.state\n    let newTopScore = topScore\n\n    if (currentScore > topScore) {\n      newTopScore = currentScore\n    }\n\n    this.setState({topScore: newTopScore, isGameInProgress: false})\n  }\n\n  clickEmoji = id => {\n    const {emojisList} = this.props\n    const {clickedEmojisList} = this.state\n    const isEmojiPresent = clickedEmojisList.includes(id)\n    const clickedEmojisLength = clickedEmojisList.length\n\n    if (isEmojiPresent) {\n      this.finishGameAndSetTopScore(clickedEmojisLength)\n    } else {\n      if (emojisList.length - 1 === clickedEmojisLength) {\n        this.finishGameAndSetTopScore(emojisList.length)\n      }\n      this.setState(previousState => ({\n        clickedEmojisList: [...previousState.clickedEmojisList, id],\n      }))\n    }\n  }\n\n  getShuffledEmojisList = () => {\n    const {emojisList} = this.props\n\n    return emojisList.sort(() => Math.random() - 0.5)\n  }\n\n  renderEmojisList = () => {\n    const shuffledEmojisList = this.getShuffledEmojisList()\n\n    return (\n      <ul className=\"emojis-list-container\">\n        {shuffledEmojisList.map(emojiObject => (\n          <EmojiCard\n            key={emojiObject.id}\n            emojiDetails={emojiObject}\n            clickEmoji={this.clickEmoji}\n          />\n        ))}\n      </ul>\n    )\n  }\n\n  render() {\n    const {clickedEmojisList, isGameInProgress, topScore} = this.state\n\n    return (\n      <div>\n        <NavBar\n          currentScore={clickedEmojisList.length}\n          isGameInProgress={isGameInProgress}\n          topScore={topScore}\n        />\n        <div>\n          {isGameInProgress ? this.renderEmojisList() : this.renderScoreCard()}\n        </div>\n      </div>\n    )\n  }\n}\nexport default EmojiGame\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}